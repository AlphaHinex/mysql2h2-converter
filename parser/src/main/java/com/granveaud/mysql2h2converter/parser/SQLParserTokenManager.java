/* SQLParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package com.granveaud.mysql2h2converter.parser;
import java.util.*;
import java.io.*;
import com.granveaud.mysql2h2converter.sql.*;

/** Token Manager. */
public class SQLParserTokenManager implements SQLParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8200404000000L) != 0L)
         {
            jjmatchedKind = 120;
            return 29;
         }
         if ((active0 & 0xfff7dffbfbffff80L) != 0L || (active1 & 0xfcffffffffffffL) != 0L)
         {
            jjmatchedKind = 120;
            return 48;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            return 25;
         }
         return -1;
      case 1:
         if ((active0 & 0xbfff7ffcfeff9f80L) != 0L || (active1 & 0xb97feffffe6effL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 48;
         }
         if ((active0 & 0x4000800301006000L) != 0L || (active1 & 0x44801000019100L) != 0L)
            return 48;
         return -1;
      case 2:
         if ((active0 & 0xf7ff7ffcfabf9d80L) != 0L || (active1 & 0xb83fefdffeeeffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 48;
         }
         if ((active0 & 0x800800305404200L) != 0L || (active1 & 0x1400020010000L) != 0L)
            return 48;
         return -1;
      case 3:
         if ((active0 & 0xf377e0f6f8bb9480L) != 0L || (active1 & 0xb02fcbdbfeeebeL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 48;
         }
         if ((active0 & 0x4881f0802040900L) != 0L || (active1 & 0x8102404010041L) != 0L)
            return 48;
         return -1;
      case 4:
         if ((active0 & 0x93776ab6f8b99480L) != 0L || (active1 & 0xa00d00cfbcee97L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 4;
            }
            return 48;
         }
         if ((active0 & 0x6000804000020000L) != 0L || (active1 & 0x1022cb10420028L) != 0L)
            return 48;
         return -1;
      case 5:
         if ((active0 & 0x13774aa2f8b91080L) != 0L || (active1 & 0x2004000f1c0c97L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 48;
         }
         if ((active0 & 0x8000201400008400L) != 0L || (active1 & 0x800908c0a2e200L) != 0L)
            return 48;
         return -1;
      case 6:
         if ((active0 & 0x13744a00f0111080L) != 0L || (active1 & 0x400070c0411L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 48;
         }
         if ((active0 & 0x300a208a80000L) != 0L || (active1 & 0x20000008100886L) != 0L)
            return 48;
         return -1;
      case 7:
         if ((active0 & 0x1110480080110080L) != 0L || (active1 & 0x400070c0010L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
            return 48;
         }
         if ((active0 & 0x264020070001000L) != 0L || (active1 & 0x401L) != 0L)
            return 48;
         return -1;
      case 8:
         if ((active0 & 0x1110000000100000L) != 0L || (active1 & 0x400020c0010L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 8;
            return 48;
         }
         if ((active0 & 0x480080010080L) != 0L || (active1 & 0x5000000L) != 0L)
            return 48;
         return -1;
      case 9:
         if ((active0 & 0x100000L) != 0L || (active1 & 0x400020c0000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 9;
            return 48;
         }
         if ((active0 & 0x1110000000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 48;
         return -1;
      case 10:
         if ((active0 & 0x100000L) != 0L || (active1 & 0x20c0000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 10;
            return 48;
         }
         if ((active1 & 0x40000000000L) != 0L)
            return 48;
         return -1;
      case 11:
         if ((active1 & 0x40000L) != 0L)
            return 48;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x2080000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 11;
            return 48;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 12;
            return 48;
         }
         if ((active1 & 0x80000L) != 0L)
            return 48;
         return -1;
      case 13:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 13;
            return 48;
         }
         if ((active0 & 0x100000L) != 0L)
            return 48;
         return -1;
      case 14:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 14;
            return 48;
         }
         return -1;
      case 15:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 15;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 34:
         return jjStopAtPos(0, 133);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 39:
         return jjStopAtPos(0, 132);
      case 40:
         return jjStopAtPos(0, 135);
      case 41:
         return jjStopAtPos(0, 136);
      case 44:
         return jjStopAtPos(0, 137);
      case 59:
         return jjStopAtPos(0, 134);
      case 60:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x28000L);
      case 61:
         return jjStopAtPos(0, 113);
      case 62:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L);
      case 63:
         return jjStopAtPos(0, 138);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800001100000L, 0x401230002000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8200404000000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000100000800400L, 0x8008008e000808L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x33002081880L, 0x1100200L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000008000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x10100100000045L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000000300002000L, 0x44000000218000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x220000000000000L, 0x4400040000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x110000080000000L, 0x40000020L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000044000L, 0x1000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000100L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x80L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x2000000410L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000040000000L, 0x20000800002L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc40c0008030100L, 0x8040800000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0xa001000010000200L, 0x20010000004000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2400000000000L, 0x420000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x208000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      case 61:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 62:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2430000021000L, active1, 0x100008004208a0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x9900028a2490080L, active1, 0x2000900610L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x200004000008L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x442c040c000000L, active1, 0x100080000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004000000000L, active1, 0x10000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 48);
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc401000310000000L, active1, 0x20410000018000L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1220001000804100L, active1, 0x810844c8040004L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4002L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 111, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x200c00L, active1, 0x8148000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 114, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000800001000200L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000140000L, active1, 0x3000041L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100840000000L, active1, 0x62004000002L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x800000000L);
      case 67:
      case 99:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x802000000000L, active1, 0x4400000000L);
      case 68:
      case 100:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 48);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x4110000080000100L, active1, 0x40004000L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x200000000008L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x10L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa001000000208000L, active1, 0x8000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080L, active1, 0x10010088d20241L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc8000810000L, active1, 0x80000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1264200008000000L, active1, 0x80000000200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004000000800L, active1, 0x100000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 82:
      case 114:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 112, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x2400020000000L, active1, 0x102000084L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000000L, active1, 0x8c00L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 48);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 48);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x30200101000L, active1, 0x210012020L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400001000000000L, active1, 0x8000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x204000081400L, active1, 0x4000104000L);
      case 66:
      case 98:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x401000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000L, active1, 0x80000000000828L);
      case 68:
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 48);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000a8200000000L, active1, 0x210808214L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x220000000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x110802490000080L, active1, 0x40002000L);
      case 75:
      case 107:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 48);
         break;
      case 76:
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 48);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 48);
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40020000L, active1, 0x809000001L);
      case 77:
      case 109:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 48);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000L, active1, 0x80000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x20040000000000L);
      case 79:
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 48);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x20100000L, active1, 0x10000200000L);
      case 80:
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x220006000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000008000L, active1, 0x10000100000000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000482L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80420000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000008000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0x80000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0x8000000c000800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x24000000001000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000800000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 48);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 48);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x802020000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x40000000L);
      case 71:
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x210000000L, active1, 0L);
      case 72:
      case 104:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x400008000000L, active1, 0x80001000086L);
      case 75:
      case 107:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 48);
         break;
      case 76:
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000080L, active1, 0x80000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000010000L, active1, 0x20000000002000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 82:
      case 114:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 48);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x208000000000L, active1, 0x208410L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x40000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 48);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 48);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x1240020000008400L, active1, 0x4201L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8110000080080000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 48);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2002000001000L, active1, 0x40000000082L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x5000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0x800L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 48);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 48);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 48);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 48);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 48);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x240000200000000L, active1, 0x100011L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x28060100080L, active1, 0x400L);
      case 75:
      case 107:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 48);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x24000000080000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x110000080000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 48);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x400018800000L, active1, 0x2000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000210000L, active1, 0x40000L);
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 48);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 48);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 48);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 48);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 48);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 48);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 48);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x8000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L);
      case 89:
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 48);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000480000010000L, active1, 0x1000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000400L);
      case 68:
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 48);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 48);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 48);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x40000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 48);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 48);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 48);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x40100000L, active1, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x24000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 48);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 48);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000080L, active1, 0x6000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x240000000000000L, active1, 0x1L);
      case 89:
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 66:
      case 98:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 48);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0x10L);
      case 68:
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 48);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 48);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000080L, active1, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0x80000L);
      case 76:
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000010000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 48);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 48);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 48);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 48);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40001000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 88, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x80000L);
      case 80:
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 48);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 48);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 90, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0x40000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 48);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 52, 48);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2040000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L);
      case 83:
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 48);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 48);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0x2000000L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 106, 48);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L);
      case 89:
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 82, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000L);
      case 89:
      case 121:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 83, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 48);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(16, 89, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(26); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(18, 19); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 48)
                     { jjAddStates(10, 11); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(30); }
                  break;
               case 48:
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  { jjCheckNAdd(12); }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar != 35)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 5:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar == 42)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 7:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 6); }
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 6); }
                  break;
               case 9:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 17:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(23, 21); }
                  break;
               case 23:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 39 && kind > 127)
                     kind = 127;
                  break;
               case 30:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 39 && kind > 130)
                     kind = 130;
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(34, 17); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 20); }
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 37:
                  if (curChar == 46)
                     { jjCheckNAdd(38); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  { jjCheckNAddTwoStates(40, 39); }
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 39); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 43:
                  if (curChar == 48)
                     { jjAddStates(10, 11); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAddTwoStates(11, 12); }
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAddTwoStates(11, 12); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAdd(14); }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAddTwoStates(11, 12); }
                  }
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     { jjCheckNAddTwoStates(11, 12); }
                  }
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
               case 8:
                  { jjCheckNAddTwoStates(8, 6); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if (curChar == 96)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 96 && kind > 121)
                     kind = 121;
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 24:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 28:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 44:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(8, 6); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\75", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\47", "\42", "\73", "\50", "\51", "\54", 
"\77", "\174\174", "\46\46", "\76\75", "\76", "\74\75", "\74", "\74\76", "\41\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   33, 34, 17, 36, 35, 37, 38, 33, 34, 35, 44, 46, 6, 7, 9, 15, 
   16, 36, 35, 37, 38, 14, 15, 16, 21, 22, 26, 27, 39, 41, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SQLParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SQLParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xe3ffffffffffffffL, 0x7fffdL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[48];
    private final int[] jjstateSet = new int[2 * 48];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
