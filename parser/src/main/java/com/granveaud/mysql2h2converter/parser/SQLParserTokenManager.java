/* SQLParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package com.granveaud.mysql2h2converter.parser;
import java.util.*;
import java.io.*;
import com.granveaud.mysql2h2converter.sql.*;

/** Token Manager. */
public class SQLParserTokenManager implements SQLParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active2 & 0x400L) != 0L)
            return 23;
         if ((active1 & 0x400000000080L) != 0L)
         {
            jjmatchedKind = 119;
            return 65;
         }
         if ((active0 & 0x4200404000000L) != 0L)
         {
            jjmatchedKind = 119;
            return 44;
         }
         if ((active0 & 0xfffb9ffbfaefff80L) != 0L || (active1 & 0x4f1ff6e7ffef7fL) != 0L)
         {
            jjmatchedKind = 119;
            return 66;
         }
         if ((active0 & 0x400001100000L) != 0L || (active1 & 0x200918001000L) != 0L)
         {
            jjmatchedKind = 119;
            return 18;
         }
         return -1;
      case 1:
         if ((active0 & 0x2000400301006000L) != 0L || (active1 & 0x4140080000c880L) != 0L)
            return 66;
         if ((active0 & 0xdfffbffcfeff9f80L) != 0L || (active1 & 0xe1ff7ffff377fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 1;
            }
            return 66;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 1;
            }
            return 17;
         }
         return -1;
      case 2:
         if ((active0 & 0xfbffbffcfabf9d80L) != 0L || (active1 & 0xe1ff7efff777fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 2;
            }
            return 66;
         }
         if ((active0 & 0x400400305404200L) != 0L || (active1 & 0x200010008000L) != 0L)
            return 66;
         return -1;
      case 3:
         if ((active0 & 0x82441f0802040900L) != 0L || (active1 & 0x2081202008020L) != 0L)
            return 66;
         if ((active0 & 0x79bbe0f6f8bb9480L) != 0L || (active1 & 0xc17e5edff775fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 3;
            }
            return 66;
         }
         return -1;
      case 4:
         if ((active0 & 0x3000404000020000L) != 0L || (active1 & 0x4116588210014L) != 0L)
            return 66;
         if ((active0 & 0xc9bbaab6f8b99480L) != 0L || (active1 & 0x8068067de774bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 4;
            }
            return 66;
         }
         return -1;
      case 5:
         if ((active0 & 0x89bb8aa2f8b91080L) != 0L || (active1 & 0x80200078e064bL) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
            return 66;
         }
         if ((active0 & 0x4000201400008400L) != 0L || (active1 & 0x48460517100L) != 0L)
            return 66;
         return -1;
      case 6:
         if ((active0 & 0x180a208a80000L) != 0L || (active1 & 0x8000004080443L) != 0L)
            return 66;
         if ((active0 & 0x89ba0a00f0111080L) != 0L || (active1 & 0x20003860208L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 6;
            return 66;
         }
         return -1;
      case 7:
         if ((active0 & 0x8132020070001000L) != 0L || (active1 & 0x200L) != 0L)
            return 66;
         if ((active0 & 0x888080080110080L) != 0L || (active1 & 0x20003860008L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 7;
            return 66;
         }
         return -1;
      case 8:
         if ((active0 & 0x888000000100000L) != 0L || (active1 & 0x20001060008L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 8;
            return 66;
         }
         if ((active0 & 0x80080010080L) != 0L || (active1 & 0x2800000L) != 0L)
            return 66;
         return -1;
      case 9:
         if ((active0 & 0x888000000000000L) != 0L || (active1 & 0x8L) != 0L)
            return 66;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x20001060000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 9;
            return 66;
         }
         return -1;
      case 10:
         if ((active1 & 0x20000000000L) != 0L)
            return 66;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x1060000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 10;
            return 66;
         }
         return -1;
      case 11:
         if ((active0 & 0x100000L) != 0L || (active1 & 0x1040000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 11;
            return 66;
         }
         if ((active1 & 0x20000L) != 0L)
            return 66;
         return -1;
      case 12:
         if ((active1 & 0x40000L) != 0L)
            return 66;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 12;
            return 66;
         }
         return -1;
      case 13:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 13;
            return 66;
         }
         if ((active0 & 0x100000L) != 0L)
            return 66;
         return -1;
      case 14:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 14;
            return 66;
         }
         return -1;
      case 15:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 15;
            return 66;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 138, 23);
      case 34:
         return jjStopAtPos(0, 132);
      case 39:
         return jjStopAtPos(0, 131);
      case 40:
         return jjStopAtPos(0, 134);
      case 41:
         return jjStopAtPos(0, 135);
      case 44:
         return jjStopAtPos(0, 136);
      case 59:
         return jjStopAtPos(0, 133);
      case 61:
         return jjStopAtPos(0, 111);
      case 63:
         return jjStopAtPos(0, 137);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400001100000L, 0x200918001000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4200404000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800100000800400L, 0x40047000404L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x33002081880L, 0x880100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000000008000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000004000000000L, 0x4080080000022L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000000300002000L, 0x4100000010c000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x110000000000000L, 0x2200020000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x88000080000000L, 0x20000010L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000044000L, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000080L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x1000000208L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400000040000000L, 0x10000400001L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x620c0008030100L, 0x2020400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x5000800010000200L, 0x8008000002000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x210000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x104000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1030000021000L, active1, 0x4000400210450L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4c80028a2490080L, active1, 0x1000480308L);
      case 70:
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x100002000004L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x222c040c000000L, active1, 0x80040000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4004000000000L, active1, 0x8000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 71, 66);
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6200800310000000L, active1, 0x820800000c000L);
      case 79:
      case 111:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x910001000804100L, active1, 0x42264020002L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2001L);
      case 82:
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 110, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0x200c00L, active1, 0x20a4000000000L);
      case 83:
      case 115:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 112, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000400001000200L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000008000140000L, active1, 0x1800020L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100840000000L, active1, 0x31002000001L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x400000000L);
      case 67:
      case 99:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x402000000000L, active1, 0x2200000000L);
      case 68:
      case 100:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 66);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x2088000080000100L, active1, 0x20002000L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x100000000004L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x8L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000800000208000L, active1, 0x4000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000040080L, active1, 0x4008044690120L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc8000810000L, active1, 0x40000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x932200008000000L, active1, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000000800L, active1, 0x80000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000020000000L, active1, 0x81000042L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000000L, active1, 0x4600L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 66);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 66);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x30200101000L, active1, 0x108009010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200001000000000L, active1, 0x2000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x204000081400L, active1, 0x2000082000L);
      case 66:
      case 98:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0x414L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 66);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000a8200000000L, active1, 0x10840410aL);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x88402490000080L, active1, 0x20001000L);
      case 75:
      case 107:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 66);
         break;
      case 76:
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 66);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 66);
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000040020000L, active1, 0x404800000L);
      case 77:
      case 109:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 66);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000L, active1, 0x40000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x8020000000000L);
      case 79:
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 66);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x20100000L, active1, 0x8000100000L);
      case 80:
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x110003000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000008000L, active1, 0x4000080000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000241L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40210000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x22000008000000L, active1, 0L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0x6000400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x12000000001000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000400000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 66);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 66);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x401010000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x20000000L);
      case 71:
      case 103:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x210000000L, active1, 0L);
      case 72:
      case 104:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x40000800043L);
      case 75:
      case 107:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 66);
         break;
      case 76:
      case 108:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000080L, active1, 0x40000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000010000L, active1, 0x8000000001000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 82:
      case 114:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 66);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x208000000000L, active1, 0x104208L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x20000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 66);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 66);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x8920020000008400L, active1, 0x2100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4088000080080000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 66);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000001000L, active1, 0x20000000041L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2800000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0x400L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 66);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 66);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 66);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 66);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 66);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x8120000200000000L, active1, 0x80008L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x28060100080L, active1, 0x200L);
      case 75:
      case 107:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 66);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000000080000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x88000080000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 66);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x18800000L, active1, 0x1000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000210000L, active1, 0x20000L);
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 66);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 66);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 66);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 66);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 66);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 66);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x4000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L);
      case 89:
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 66);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800080000010000L, active1, 0x800000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000200L);
      case 68:
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 66);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 66);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 66);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x20000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 66);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 66);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 66);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0x40100000L, active1, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x12000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 66);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 66);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 66);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000080L, active1, 0x3000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x8120000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L);
      case 66:
      case 98:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 66);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 66);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0x8L);
      case 68:
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 66);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 66);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 66);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000080L, active1, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0x40000L);
      case 76:
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 66);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 66);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 66);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 66);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 66);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 66);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000800000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 8;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 66);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x40000L);
      case 80:
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 66);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 66);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 66);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0x20000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 66);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 9;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 66:
      case 98:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 66);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1020000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      case 83:
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 66);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 55, 66);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 10;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0x1000000L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 105, 66);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 11;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0x1000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L);
      case 89:
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 12;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000L);
      case 89:
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 82, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 13;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 66);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 14;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 15;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0x1000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 16;
   }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(16, 88, 66);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 65;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 66:
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(27); }
                  break;
               case 65:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(27); }
                  break;
               case 44:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(27); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(45); }
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(27); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(33, 34); }
                  else if (curChar == 33)
                     { jjCheckNAdd(23); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 48)
                     { jjAddStates(10, 11); }
                  else if (curChar == 60)
                     { jjCheckNAddTwoStates(23, 48); }
                  else if (curChar == 62)
                     { jjCheckNAdd(23); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(27); }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar != 35)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 5:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar == 42)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 7:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 6); }
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 6); }
                  break;
               case 9:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 20:
                  if (curChar == 38 && kind > 116)
                     kind = 116;
                  break;
               case 21:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x7000000000000000L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 23:
                  if (curChar == 61 && kind > 117)
                     kind = 117;
                  break;
               case 24:
                  if (curChar == 62)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if (curChar == 33)
                     { jjCheckNAdd(23); }
                  break;
               case 30:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 32:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(38, 36); }
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(36); }
                  break;
               case 40:
                  if (curChar == 39)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 42:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 45:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar == 39 && kind > 129)
                     kind = 129;
                  break;
               case 47:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(23, 48); }
                  break;
               case 48:
                  if (curChar == 62 && kind > 117)
                     kind = 117;
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAdd(50); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 32); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 20); }
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 54:
                  if (curChar == 46)
                     { jjCheckNAdd(55); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  { jjCheckNAddTwoStates(57, 56); }
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 56); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 60:
                  if (curChar == 48)
                     { jjAddStates(10, 11); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(27); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(27); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(27); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(27); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAdd(29); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(27); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
               case 8:
                  { jjCheckNAddTwoStates(8, 6); }
                  break;
               case 11:
                  if ((0x4000000040000L & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 12:
               case 15:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 13:
                  if (curChar == 124 && kind > 116)
                     kind = 116;
                  break;
               case 14:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if (curChar == 96)
                     { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 96 && kind > 120)
                     kind = 120;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 43:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 61:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  { jjCheckNAdd(62); }
                  break;
               case 63:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(8, 6); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 65 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\75", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\47", "\42", "\73", "\50", "\51", "\54", "\77", 
"\41", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   50, 51, 32, 53, 52, 54, 55, 50, 51, 52, 61, 63, 6, 7, 9, 30, 
   31, 53, 52, 54, 55, 29, 30, 31, 36, 37, 41, 42, 56, 58, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      debugStream.println("Returning the <EOF> token.\n");
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
   {
      debugStream.println("Skipping character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
         curChar = input_stream.BeginToken();
   }
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
      debugStream.println("Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
      {
         debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
         input_stream.backup(curPos - jjmatchedPos - 1);
      }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrException.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0 },
   { 1 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 4 },
   { 5 },
   { 6 },
   { 7 },
   { 8 },
   { 9 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 11, 26, 27, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 13 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 15 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 17, 26, 27, },
   { 18, 26, 27, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 20 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 23 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 17, 26, 27, },
   { 17, 26, 27, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 29 },
   { 30 },
   { 31 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 33 },
   { 34 },
   { 35 },
   { 36 },
   { 37 },
   { 38 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 40 },
   { 41 },
   { 42 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 26, 27, 44, },
   { 45 },
   { 46 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 48 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 50 },
   { 51 },
   { 52 },
   { 53 },
   { 54 },
   { 55 },
   { 56 },
   { 57 },
   { 58 },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 2, 3, 10, 12, 14, 16, 19, 21, 22, 24, 25, 26, 28, 32, 39, 43, 47, 49, 59, 60, },
   { 61 },
   { 62 },
   { 63 },
   { 64 },
   { 11, 26, 27, },
   { 26, 27, },
},

};
protected static final int[][] kindForState = {
{ 
  5, 
  5, 
  5, 
  5, 
  6, 
  6, 
  6, 
  6, 
  6, 
  6, 
  6, 
  116, 
  116, 
  116, 
  116, 
  116, 
  116, 
  116, 
  116, 
  116, 
  116, 
  116, 
  117, 
  117, 
  117, 
  117, 
  119, 
  119, 
  120, 
  120, 
  120, 
  120, 
  125, 
  125, 
  125, 
  125, 
  125, 
  125, 
  125, 
  126, 
  126, 
  126, 
  126, 
  129, 
  129, 
  129, 
  129, 
  117, 
  117, 
  124, 
  124, 
  125, 
  125, 
  125, 
  125, 
  125, 
  125, 
  125, 
  125, 
  124, 
  127, 
  127, 
  127, 
  130, 
  130, }
};
  int kindCnt = 0;
  protected final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }


  protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[139];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }


void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SQLParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SQLParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 65; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xf1ffffffffffffffL, 0x7feL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[65];
    private final int[] jjstateSet = new int[2 * 65];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
