/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package com.granveaud.mysql2h2converter.parser;

import java.util.*;
import java.io.*;
import com.granveaud.mysql2h2converter.sql.*;

public class SQLParser implements SQLParserConstants {

  final public Token CharLiteral() throws ParseException {    try {
Token tk;
    String str;
    Token tk1;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 124:{
        tk = jj_consume_token(124);
        str = parseStringValue((char) 0x27);
tk1 = new Token(tk.kind, str);
        break;
        }
      case 125:{
        tk = jj_consume_token(125);
        str = parseStringValue((char) 0x22);
tk1 = new Token(tk.kind, str);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return tk1;
    } finally {
      trace_return("CharLiteral");
    }
}

  String parseStringValue(char delimiter) throws ParseException, ParseException {
    trace_call("parseStringValue");
    try {StringBuilder sb = new StringBuilder();
    sb.append(delimiter);

    try {
        char c = jj_input_stream.BeginToken();
        while (true) {
            sb.append(c);
            if (c == delimiter) { // single or double quote
                // if followed by another quote, continue, otherwise we are finished
                char c2 = jj_input_stream.readChar();
                if (c2 != delimiter) {
                    jj_input_stream.backup(1);
                    return sb.toString();
                }
                sb.append(c2);
            } else if (c == 0x5c) { // backslash
                char c2 = jj_input_stream.readChar();
                sb.append(c2); // always append following character even if it is a single quote
            }

            // next character
            c = jj_input_stream.readChar();
        }
    } catch (IOException e) {
        throw new ParseException("Error while parsing string value: " + e.getMessage());
    }
    } finally {
      trace_return("parseStringValue");
    }
  }

// parse one statement in a script (terminated by ';')
  final public SqlStatement ScriptStatement() throws ParseException {    try {
SqlStatement st = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USE:
      case CREATE:
      case DROP:
      case SET:
      case DELETE:
      case UPDATE:
      case INSERT:
      case ALTER:
      case LOCK:
      case UNLOCK:
      case START:
      case COMMIT:
      case 126:{
        st = Statement();
        jj_consume_token(126);
        break;
        }
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return st;
    } finally {
      trace_return("ScriptStatement");
    }
}

// parse one statement (without trailing ';')
  final public SqlStatement Statement() throws ParseException {    try {
SqlStatement st = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USE:{
        st = UseStatement();
        break;
        }
      case SET:{
        st = SetVariableStatement();
        break;
        }
      case CREATE:{
        st = CreateStatement();
        break;
        }
      case ALTER:{
        st = AlterStatement();
        break;
        }
      case DROP:{
        st = DropStatement();
        break;
        }
      case INSERT:{
        st = InsertStatement();
        break;
        }
      case UPDATE:{
        st = UpdateStatement();
        break;
        }
      case DELETE:{
        st = DeleteStatement();
        break;
        }
      case LOCK:{
        st = LockTablesStatement();
        break;
        }
      case UNLOCK:{
        st = UnlockTablesStatement();
        break;
        }
      case START:{
        st = StartTransactionStatement();
        break;
        }
      case COMMIT:{
        st = CommitTransactionStatement();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
st = new EmptyStatement();
      }
return st;
    } finally {
      trace_return("Statement");
    }
}

  final public SqlStatement SetVariableStatement() throws ParseException {    try {
Assignment assignment;
      jj_consume_token(SET);
      assignment = Assignment();
return new SetVariableStatement(assignment);
    } finally {
      trace_return("SetVariableStatement");
    }
}

/*
INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name [(col_name,...)]
    {VALUES | VALUE} ({expr | DEFAULT},...),(...),...
    [ ON DUPLICATE KEY UPDATE
      col_name = expr
        [, col_name = expr] ... ]
Or:

INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name
    SET col_name = {expr | DEFAULT}, ...
    [ ON DUPLICATE KEY UPDATE
      col_name = expr
        [, col_name = expr] ... ]
Or:

INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name [(col_name,...)]
    SELECT ...
    [ ON DUPLICATE KEY UPDATE
      col_name = expr
        [, col_name = expr] ... ]
*/
  final public SqlStatement InsertStatement() throws ParseException {    try {
List<ValueList> valueLists = null;
    String tableName;
    List<String> columnNames = null;
    List<Assignment> assignments = null;
    List<Assignment> onDuplicateKeyUpdateAssignments = null;
    Token tk = null, tk2 = null, tk3 = null, tk4 = null, tk5 = null;
      jj_consume_token(INSERT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOW_PRIORITY:
      case HIGH_PRIORITY:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOW_PRIORITY:{
          tk = jj_consume_token(LOW_PRIORITY);
          break;
          }
        case HIGH_PRIORITY:{
          tk2 = jj_consume_token(HIGH_PRIORITY);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELAYED:{
        tk3 = jj_consume_token(DELAYED);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGNORE:{
        tk4 = jj_consume_token(IGNORE);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTO:{
        tk5 = jj_consume_token(INTO);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      tableName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        jj_consume_token(127);
        columnNames = DbObjectNames();
        jj_consume_token(128);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALUES:
      case VALUE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VALUES:{
          jj_consume_token(VALUES);
          break;
          }
        case VALUE:{
          jj_consume_token(VALUE);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        valueLists = MultiValueList();
        break;
        }
      case SET:{
        jj_consume_token(SET);
        assignments = Assignments();
        break;
        }
      case SELECT:{
        jj_consume_token(SELECT);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ON:{
        jj_consume_token(ON);
        jj_consume_token(DUPLICATE);
        jj_consume_token(KEY);
        jj_consume_token(UPDATE);
        onDuplicateKeyUpdateAssignments = Assignments();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
return new InsertStatement(tk != null, tk2 != null, tk3 != null, tk4 != null, tk5 != null, tableName,
            columnNames, valueLists, assignments, onDuplicateKeyUpdateAssignments);
    } finally {
      trace_return("InsertStatement");
    }
}

/*
UPDATE [LOW_PRIORITY] [IGNORE] table_references
    SET assignment_list
    [WHERE where_condition]
 */
  final public SqlStatement UpdateStatement() throws ParseException {    try {
String tableName;
    List<Assignment> assignments = null;
    WhereClause whereClause = null;
      jj_consume_token(UPDATE);
      tableName = DbObjectName();
      jj_consume_token(SET);
      assignments = Assignments();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        jj_consume_token(WHERE);
        whereClause = WhereClause();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
return new UpdateStatement(tableName, assignments, whereClause);
    } finally {
      trace_return("UpdateStatement");
    }
}

/*
DELETE FROM tbl_name
    [WHERE where_condition]
 */
  final public SqlStatement DeleteStatement() throws ParseException {    try {
String tableName;
    WhereClause whereClause = null;
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      tableName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        jj_consume_token(WHERE);
        whereClause = WhereClause();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
return new DeleteStatement(tableName, whereClause);
    } finally {
      trace_return("DeleteStatement");
    }
}

/*
WHERE <boolean term> ( OR <boolean term> )*
 */
  final public WhereClause WhereClause() throws ParseException {    try {
BooleanTerm booleanTerm = null;
    List<BooleanTerm> booleanTerms = new ArrayList<BooleanTerm>();
      booleanTerm = BooleanTerm();
booleanTerms.add(booleanTerm);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_1;
        }
        jj_consume_token(OR);
        booleanTerm = BooleanTerm();
booleanTerms.add(booleanTerm);
      }
return new WhereClause(booleanTerms);
    } finally {
      trace_return("WhereClause");
    }
}

  final public BooleanTerm BooleanTerm() throws ParseException {    try {
BooleanFactor booleanFactor = null;
    List<BooleanFactor> booleanFactors = new ArrayList<BooleanFactor>();
      booleanFactor = BooleanFactor();
booleanFactors.add(booleanFactor);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_2;
        }
        jj_consume_token(AND);
        booleanFactor = BooleanFactor();
booleanFactors.add(booleanFactor);
      }
return new BooleanTerm(booleanFactors);
    } finally {
      trace_return("BooleanTerm");
    }
}

  final public BooleanFactor BooleanFactor() throws ParseException {    try {
Token tk = null;
    BooleanPrimary booleanPrimary = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        tk = jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      booleanPrimary = BooleanPrimary();
return new BooleanFactor(tk != null, booleanPrimary);
    } finally {
      trace_return("BooleanFactor");
    }
}

  final public BooleanPrimary BooleanPrimary() throws ParseException {    try {
String columnName;
    Value value;
      columnName = DbObjectName();
      jj_consume_token(EQUALS);
      value = Value();
return new BooleanPrimary(columnName, value);
    } finally {
      trace_return("BooleanPrimary");
    }
}

  final public SqlStatement UseStatement() throws ParseException {    try {
String dbName;
      jj_consume_token(USE);
      dbName = DbObjectName();
return new UseStatement(dbName);
    } finally {
      trace_return("UseStatement");
    }
}

/*
ALTER [IGNORE] TABLE tbl_name
    alter_specification [, alter_specification] ...
*/
  final public SqlStatement AlterStatement() throws ParseException {    try {
SqlStatement st;
      jj_consume_token(ALTER);
      st = AlterTableStatement();
return st;
    } finally {
      trace_return("AlterStatement");
    }
}

  final public SqlStatement AlterTableStatement() throws ParseException {    try {
Token tk = null;
    String tableName;
    AlterTableSpecification specification = null;
    List<AlterTableSpecification> specifications = new ArrayList<AlterTableSpecification>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGNORE:{
        tk = jj_consume_token(IGNORE);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(TABLE);
      tableName = DbObjectName();
      specification = AlterTableSpecification();
specifications.add(specification);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 129:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_3;
        }
        jj_consume_token(129);
        specification = AlterTableSpecification();
specifications.add(specification);
      }
return new AlterTableStatement(tk != null, tableName, specifications);
    } finally {
      trace_return("AlterTableStatement");
    }
}

/*
alter_specification:
        | ADD INDEX [index_name] [index_type] (index_col_name,...)
        | ADD [CONSTRAINT [symbol]]
        PRIMARY KEY [index_type] (index_col_name,...)
        | ADD [CONSTRAINT [symbol]]
        UNIQUE [index_name] [index_type] (index_col_name,...)
        | ADD [FULLTEXT|SPATIAL] [index_name] (index_col_name,...)
        | ADD [CONSTRAINT [symbol]]
        FOREIGN KEY [index_name] (index_col_name,...)
        [reference_definition]
        | MODIFY [COLUMN] column_definition [FIRST | AFTER col_name]
*/
  final public AlterTableSpecification AlterTableSpecification() throws ParseException {    try {
Token tk;
    ColumnConstraint constraint;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        tk = jj_consume_token(ADD);
        constraint = ColumnConstraint();
        break;
        }
      case MODIFY:{
        tk = jj_consume_token(MODIFY);
        constraint = ColumnConstraint();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return new AlterTableSpecification(tk.image, constraint);
    } finally {
      trace_return("AlterTableSpecification");
    }
}

  final public SqlStatement CreateStatement() throws ParseException {    try {
SqlStatement st;
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DATABASE:{
        st = CreateDatabaseStatement();
        break;
        }
      case TEMPORARY:
      case TABLE:{
        st = CreateTableStatement();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return st;
    } finally {
      trace_return("CreateStatement");
    }
}

  final public SqlStatement CreateDatabaseStatement() throws ParseException {    try {
Token tk = null;
    String dbName;
      jj_consume_token(DATABASE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        tk = jj_consume_token(IF);
        jj_consume_token(NOT);
        jj_consume_token(EXISTS);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      dbName = DbObjectName();
return new CreateDatabaseStatement(dbName, tk != null);
    } finally {
      trace_return("CreateDatabaseStatement");
    }
}

/*CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
      [(create_definition,...)]
      [table_options] [select_statement]

*/
  final public SqlStatement CreateTableStatement() throws ParseException {    try {
Token tk = null, tk2 = null;
    String tableName;
    CreateTableDefinition definition = null;
    List<CreateTableOption> options = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEMPORARY:{
        tk = jj_consume_token(TEMPORARY);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(TABLE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        tk2 = jj_consume_token(IF);
        jj_consume_token(NOT);
        jj_consume_token(EXISTS);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      tableName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        definition = CreateTableDefinition();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_DEFAULT:
      case AUTO_INCREMENT:
      case COMMENT:
      case CHARACTER:
      case COLLATE:
      case S_IDENTIFIER:{
        options = CreateTableOptions();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
return new CreateTableStatement(tk != null, tk2 != null, tableName, definition, options);
    } finally {
      trace_return("CreateTableStatement");
    }
}

  final public List<CreateTableOption> CreateTableOptions() throws ParseException {    try {
List<CreateTableOption> result = new ArrayList<CreateTableOption>();
    CreateTableOption option = null;
      option = CreateTableOption();
result.add(option);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_DEFAULT:
        case AUTO_INCREMENT:
        case COMMENT:
        case CHARACTER:
        case COLLATE:
        case S_IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_4;
        }
        option = CreateTableOption();
result.add(option);
      }
return result;
    } finally {
      trace_return("CreateTableOptions");
    }
}

  final public CreateTableOption CreateTableOption() throws ParseException {    try {
Token tk1 = null, tk2 = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        tk1 = jj_consume_token(S_IDENTIFIER);
        break;
        }
      case K_DEFAULT:{
        tk1 = jj_consume_token(K_DEFAULT);
        break;
        }
      case COMMENT:{
        tk1 = jj_consume_token(COMMENT);
        break;
        }
      case AUTO_INCREMENT:{
        tk1 = jj_consume_token(AUTO_INCREMENT);
        break;
        }
      case CHARACTER:{
        tk1 = jj_consume_token(CHARACTER);
        jj_consume_token(SET);
        break;
        }
      case COLLATE:{
        tk1 = jj_consume_token(COLLATE);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          tk2 = jj_consume_token(S_IDENTIFIER);
          break;
          }
        case 124:
        case 125:{
          tk2 = CharLiteral();
          break;
          }
        case S_INTEGER:{
          tk2 = jj_consume_token(S_INTEGER);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
return new CreateTableOption(tk1.image, tk2 != null ? tk2.image : null);
    } finally {
      trace_return("CreateTableOption");
    }
}

  final public CreateTableDefinition CreateTableDefinition() throws ParseException {    try {
List<ColumnDefinition> columnDefinitions = new ArrayList<ColumnDefinition>();
    List<ColumnConstraint> columnConstraints = new ArrayList<ColumnConstraint>();
    ColumnDefinition columnDefinition;
    ColumnConstraint columnConstraint;
      jj_consume_token(127);
      if (jj_2_1(3)) {
        columnDefinition = ColumnDefinition();
columnDefinitions.add(columnDefinition);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMARY:
        case KEY:
        case CONSTRAINT:
        case INDEX:
        case UNIQUE:
        case FULLTEXT:
        case SPATIAL:
        case FOREIGN:
        case CHECK:
        case COLUMN:
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          columnConstraint = ColumnConstraint();
columnConstraints.add(columnConstraint);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 129:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_5;
        }
        jj_consume_token(129);
        if (jj_2_2(3)) {
          columnDefinition = ColumnDefinition();
columnDefinitions.add(columnDefinition);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PRIMARY:
          case KEY:
          case CONSTRAINT:
          case INDEX:
          case UNIQUE:
          case FULLTEXT:
          case SPATIAL:
          case FOREIGN:
          case CHECK:
          case COLUMN:
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            columnConstraint = ColumnConstraint();
columnConstraints.add(columnConstraint);
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(128);
return new CreateTableDefinition(columnDefinitions, columnConstraints);
    } finally {
      trace_return("CreateTableDefinition");
    }
}

/*
column_definition:
        col_name type [NOT NULL | NULL] [DEFAULT default_value] [ON UPDATE update_value]
        [AUTO_INCREMENT] [[PRIMARY] KEY] [COMMENT 'string']
        [reference_definition]
  */
  final public ColumnDefinition ColumnDefinition() throws ParseException {    try {
ColumnName columnName;
    ColumnType columnType;
    Token tk = null, tk2 = null, tk3 = null, tk4 = null, tk5 = null;
    Value defaultValue = null;
    Value updateValue = null;
    StringValue comment = null;
    ColumnReference columnReference = null;
      columnName = ColumnName();
      columnType = ColumnType();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:
        case NULL:
        case K_DEFAULT:
        case AUTO_INCREMENT:
        case PRIMARY:
        case KEY:
        case COMMENT:
        case REFERENCES:
        case ON:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          tk = jj_consume_token(NOT);
          jj_consume_token(NULL);
          break;
          }
        case NULL:{
          tk2 = jj_consume_token(NULL);
          break;
          }
        case K_DEFAULT:{
          jj_consume_token(K_DEFAULT);
          defaultValue = Value();
          break;
          }
        case ON:{
          jj_consume_token(ON);
          jj_consume_token(UPDATE);
          updateValue = Value();
          break;
          }
        case AUTO_INCREMENT:{
          tk3 = jj_consume_token(AUTO_INCREMENT);
          break;
          }
        case PRIMARY:
        case KEY:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PRIMARY:{
            tk4 = jj_consume_token(PRIMARY);
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          tk5 = jj_consume_token(KEY);
          break;
          }
        case COMMENT:{
          jj_consume_token(COMMENT);
          comment = StringValue();
          break;
          }
        case REFERENCES:{
          columnReference = ColumnReference();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
return new ColumnDefinition(columnName, columnType, tk2 != null, tk != null, tk3 != null, tk4 != null, tk5 != null,
                defaultValue, updateValue, comment, columnReference);
    } finally {
      trace_return("ColumnDefinition");
    }
}

/* col_name [(length)] [ASC | DESC] */
  final public ColumnName ColumnName() throws ParseException {    try {
String columnName;
    IntegerValue length = null;
    Token tk = null, tk2 = null;
      columnName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        jj_consume_token(127);
        length = IntValue();
        jj_consume_token(128);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASC:{
        tk = jj_consume_token(ASC);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESC:{
        tk2 = jj_consume_token(DESC);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
return new ColumnName(columnName, length, tk != null, tk2 != null);
    } finally {
      trace_return("ColumnName");
    }
}

  final public List<ColumnName> ColumnNames() throws ParseException {    try {
List<ColumnName> result = new ArrayList<ColumnName>();
    ColumnName columnName;
      columnName = ColumnName();
result.add(columnName);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 129:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_7;
        }
        jj_consume_token(129);
        columnName = ColumnName();
result.add(columnName);
      }
return result;
    } finally {
      trace_return("ColumnNames");
    }
}

/*
    TINYINT[(length)] [UNSIGNED] [ZEROFILL]
  | SMALLINT[(length)] [UNSIGNED] [ZEROFILL]
  | MEDIUMINT[(length)] [UNSIGNED] [ZEROFILL]
  | INT[(length)] [UNSIGNED] [ZEROFILL]
  | INTEGER[(length)] [UNSIGNED] [ZEROFILL]
  | BIGINT[(length)] [UNSIGNED] [ZEROFILL]
  | REAL[(length,decimals)] [UNSIGNED] [ZEROFILL]
  | DOUBLE[(length,decimals)] [UNSIGNED] [ZEROFILL]
  | FLOAT[(length,decimals)] [UNSIGNED] [ZEROFILL]
  | DECIMAL(length,decimals) [UNSIGNED] [ZEROFILL]
  | NUMERIC(length,decimals) [UNSIGNED] [ZEROFILL]
  | DATE
  | TIME
  | TIMESTAMP
  | DATETIME
  | CHAR(length) [BINARY | ASCII | UNICODE]
  | VARCHAR(length) [BINARY]
  | TINYBLOB
  | BLOB
  | MEDIUMBLOB
  | LONGBLOB
  | TINYTEXT
  | TEXT
  | MEDIUMTEXT
  | LONGTEXT
  | ENUM(value1,value2,value3,...)
  | SET(value1,value2,value3,...)
    public ColumnType(String name, Integer length, Integer decimals, List<String> values, boolean unsigned, boolean zerofill, boolean binary, boolean ascii, boolean unicode) {
*/
  final public ColumnType ColumnType() throws ParseException {    try {
IntegerValue length = null;
    IntegerValue decimals = null;
    Token tk = null, tk2 = null, tk3 = null, tk4 = null, tk5 = null, tk6 = null;
    ValueList valueList = null;
    String charsetName = null;
    String collationName = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT:{
        tk = jj_consume_token(BIT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        break;
        }
      case TINYINT:{
        tk = jj_consume_token(TINYINT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        break;
        }
      case SMALLINT:{
        tk = jj_consume_token(SMALLINT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        break;
        }
      case MEDIUMINT:{
        tk = jj_consume_token(MEDIUMINT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        break;
        }
      case INT:{
        tk = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        break;
        }
      case INTEGER:{
        tk = jj_consume_token(INTEGER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        break;
        }
      case BIGINT:{
        tk = jj_consume_token(BIGINT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        break;
        }
      case REAL:{
        tk = jj_consume_token(REAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(129);
          decimals = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        break;
        }
      case DOUBLE:{
        tk = jj_consume_token(DOUBLE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(129);
          decimals = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        break;
        }
      case FLOAT:{
        tk = jj_consume_token(FLOAT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(129);
          decimals = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          ;
        }
        break;
        }
      case DECIMAL:{
        tk = jj_consume_token(DECIMAL);
        jj_consume_token(127);
        length = IntValue();
        jj_consume_token(129);
        decimals = IntValue();
        jj_consume_token(128);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        break;
        }
      case NUMERIC:{
        tk = jj_consume_token(NUMERIC);
        jj_consume_token(127);
        length = IntValue();
        jj_consume_token(129);
        decimals = IntValue();
        jj_consume_token(128);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          tk2 = jj_consume_token(UNSIGNED);
          break;
          }
        default:
          jj_la1[72] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROFILL:{
          tk3 = jj_consume_token(ZEROFILL);
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          ;
        }
        break;
        }
      case DATE:{
        tk = jj_consume_token(DATE);
        break;
        }
      case TIME:{
        tk = jj_consume_token(TIME);
        break;
        }
      case TIMESTAMP:{
        tk = jj_consume_token(TIMESTAMP);
        break;
        }
      case DATETIME:{
        tk = jj_consume_token(DATETIME);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 127:{
          jj_consume_token(127);
          length = IntValue();
          jj_consume_token(128);
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          ;
        }
        break;
        }
      case CHAR:{
        tk = jj_consume_token(CHAR);
        jj_consume_token(127);
        length = IntValue();
        jj_consume_token(128);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BINARY:{
          tk4 = jj_consume_token(BINARY);
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASCII:{
          tk5 = jj_consume_token(ASCII);
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNICODE:{
          tk6 = jj_consume_token(UNICODE);
          break;
          }
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          ;
        }
        break;
        }
      case VARCHAR:{
        tk = jj_consume_token(VARCHAR);
        jj_consume_token(127);
        length = IntValue();
        jj_consume_token(128);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BINARY:{
          tk4 = jj_consume_token(BINARY);
          break;
          }
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[81] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[82] = jj_gen;
          ;
        }
        break;
        }
      case TINYBLOB:{
        tk = jj_consume_token(TINYBLOB);
        break;
        }
      case BLOB:{
        tk = jj_consume_token(BLOB);
        break;
        }
      case MEDIUMBLOB:{
        tk = jj_consume_token(MEDIUMBLOB);
        break;
        }
      case LONGBLOB:{
        tk = jj_consume_token(LONGBLOB);
        break;
        }
      case TINYTEXT:{
        tk = jj_consume_token(TINYTEXT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        break;
        }
      case TEXT:{
        tk = jj_consume_token(TEXT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          ;
        }
        break;
        }
      case MEDIUMTEXT:{
        tk = jj_consume_token(MEDIUMTEXT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          ;
        }
        break;
        }
      case LONGTEXT:{
        tk = jj_consume_token(LONGTEXT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        break;
        }
      case ENUM:{
        tk = jj_consume_token(ENUM);
        valueList = ValueList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        break;
        }
      case SET:{
        tk = jj_consume_token(SET);
        valueList = ValueList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHARACTER:{
          jj_consume_token(CHARACTER);
          jj_consume_token(SET);
          charsetName = Identifier();
          break;
          }
        default:
          jj_la1[93] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLLATE:{
          jj_consume_token(COLLATE);
          collationName = Identifier();
          break;
          }
        default:
          jj_la1[94] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return new ColumnType(tk.image, length, decimals, valueList, tk2 != null, tk3 != null,
               tk4 != null, tk5 != null, tk6 != null, charsetName, collationName);
    } finally {
      trace_return("ColumnType");
    }
}

/*
reference_definition:
    REFERENCES tbl_name [(index_col_name,...)]
               [MATCH FULL | MATCH PARTIAL]
               [ON DELETE reference_option]
               [ON UPDATE reference_option]

reference_option:
    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT

 public ColumnReference(String tableName, List<String> columnNames, boolean matchFull, boolean matchPartial, String onDeleteOption, String onUpdateOption) {
*/
  final public ColumnReference ColumnReference() throws ParseException {    try {
String tableName;
    List<String> columnNames = null;
    Token tk = null, tk2 = null;
    String onDeleteOption = null;
    String onUpdateOption = null;
      jj_consume_token(REFERENCES);
      tableName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        jj_consume_token(127);
        columnNames = DbObjectNames();
        jj_consume_token(128);
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MATCH:{
        jj_consume_token(MATCH);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FULL:{
          tk = jj_consume_token(FULL);
          break;
          }
        case PARTIAL:{
          tk2 = jj_consume_token(PARTIAL);
          break;
          }
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ON:{
        jj_consume_token(ON);
        jj_consume_token(DELETE);
        onDeleteOption = ReferenceOption();
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ON:{
        jj_consume_token(ON);
        jj_consume_token(UPDATE);
        onUpdateOption = ReferenceOption();
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        ;
      }
return new ColumnReference(tableName, columnNames, tk != null, tk2 != null,
                onDeleteOption, onUpdateOption);
    } finally {
      trace_return("ColumnReference");
    }
}

  final public String ReferenceOption() throws ParseException {    try {
Token tk = null, tk2 = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESTRICT:{
        tk = jj_consume_token(RESTRICT);
        break;
        }
      case CASCADE:{
        tk = jj_consume_token(CASCADE);
        break;
        }
      case NO:{
        tk = jj_consume_token(NO);
        tk2 = jj_consume_token(ACTION);
        break;
        }
      case SET:{
        tk = jj_consume_token(SET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NULL:{
          tk2 = jj_consume_token(NULL);
          break;
          }
        case K_DEFAULT:{
          tk2 = jj_consume_token(K_DEFAULT);
          break;
          }
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return tk.image + (tk2 != null ? " " + tk2.image : "");
    } finally {
      trace_return("ReferenceOption");
    }
}

/*
  | [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...)
  | [CONSTRAINT [symbol]] UNIQUE [INDEX]
        [index_name] [index_type] (index_col_name,...)
  | [CONSTRAINT [symbol]] FOREIGN KEY
        [index_name] (index_col_name,...) [reference_definition]
  | KEY [index_name] [index_type] (index_col_name,...)
  | INDEX [index_name] [index_type] (index_col_name,...)
  | [FULLTEXT|SPATIAL] [INDEX] [index_name] (index_col_name,...)
  | CHECK (expr)
  | [COLUMN] column_definition [FIRST | AFTER col_name]
 */
  final public ColumnConstraint ColumnConstraint() throws ParseException {    try {
Token tk = null, tk2 = null, tk3 = null, tk4 = null, tk5 = null;
    String constraintName = null;
    String indexName = null;
    List<ColumnName> indexColumnNames = null;
    ColumnReference reference = null;
    ExpressionValue checkExpr = null;
    ColumnDefinition columnDefinition = null;
    ColumnName afterColumn = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIMARY:
      case CONSTRAINT:
      case UNIQUE:
      case FOREIGN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONSTRAINT:{
          tk = jj_consume_token(CONSTRAINT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            constraintName = DbObjectName();
            break;
            }
          default:
            jj_la1[103] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[104] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIMARY:{
          tk2 = jj_consume_token(PRIMARY);
          tk3 = jj_consume_token(KEY);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case USING:{
            jj_consume_token(USING);
            tk4 = jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[105] = jj_gen;
            ;
          }
          jj_consume_token(127);
          indexColumnNames = ColumnNames();
          jj_consume_token(128);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case USING:{
            jj_consume_token(USING);
            tk4 = jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[106] = jj_gen;
            ;
          }
          break;
          }
        case UNIQUE:{
          tk2 = jj_consume_token(UNIQUE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KEY:
          case INDEX:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case KEY:{
              tk3 = jj_consume_token(KEY);
              break;
              }
            case INDEX:{
              tk3 = jj_consume_token(INDEX);
              break;
              }
            default:
              jj_la1[107] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[108] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            indexName = DbObjectName();
            break;
            }
          default:
            jj_la1[109] = jj_gen;
            ;
          }
          jj_consume_token(127);
          indexColumnNames = ColumnNames();
          jj_consume_token(128);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case USING:{
            jj_consume_token(USING);
            tk4 = jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[110] = jj_gen;
            ;
          }
          break;
          }
        case FOREIGN:{
          tk2 = jj_consume_token(FOREIGN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KEY:{
            tk3 = jj_consume_token(KEY);
            break;
            }
          default:
            jj_la1[111] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            indexName = DbObjectName();
            break;
            }
          default:
            jj_la1[112] = jj_gen;
            ;
          }
          jj_consume_token(127);
          indexColumnNames = ColumnNames();
          jj_consume_token(128);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case REFERENCES:{
            reference = ColumnReference();
            break;
            }
          default:
            jj_la1[113] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case KEY:{
        tk2 = jj_consume_token(KEY);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          indexName = DbObjectName();
          break;
          }
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case USING:{
          jj_consume_token(USING);
          tk4 = jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          ;
        }
        jj_consume_token(127);
        indexColumnNames = ColumnNames();
        jj_consume_token(128);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case USING:{
          jj_consume_token(USING);
          tk4 = jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[117] = jj_gen;
          ;
        }
        break;
        }
      case INDEX:{
        tk2 = jj_consume_token(INDEX);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          indexName = DbObjectName();
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case USING:{
          jj_consume_token(USING);
          tk4 = jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[119] = jj_gen;
          ;
        }
        jj_consume_token(127);
        indexColumnNames = ColumnNames();
        jj_consume_token(128);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case USING:{
          jj_consume_token(USING);
          tk4 = jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[120] = jj_gen;
          ;
        }
        break;
        }
      case FULLTEXT:
      case SPATIAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FULLTEXT:{
          tk2 = jj_consume_token(FULLTEXT);
          break;
          }
        case SPATIAL:{
          tk2 = jj_consume_token(SPATIAL);
          break;
          }
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INDEX:{
          tk3 = jj_consume_token(INDEX);
          break;
          }
        default:
          jj_la1[122] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          indexName = DbObjectName();
          break;
          }
        default:
          jj_la1[123] = jj_gen;
          ;
        }
        jj_consume_token(127);
        indexColumnNames = ColumnNames();
        jj_consume_token(128);
        break;
        }
      case CHECK:{
        tk2 = jj_consume_token(CHECK);
        jj_consume_token(127);
        checkExpr = ExpressionValue();
        jj_consume_token(128);
        break;
        }
      case COLUMN:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLUMN:{
          tk2 = jj_consume_token(COLUMN);
          break;
          }
        default:
          jj_la1[124] = jj_gen;
          ;
        }
        columnDefinition = ColumnDefinition();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FIRST:
        case AFTER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FIRST:{
            tk5 = jj_consume_token(FIRST);
            break;
            }
          case AFTER:{
            tk5 = jj_consume_token(AFTER);
            afterColumn = ColumnName();
            break;
            }
          default:
            jj_la1[125] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[126] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return new ColumnConstraint(tk != null, constraintName, (tk2 != null ? tk2.image : "") + (tk3 != null ? " " + tk3.image : ""),
                indexColumnNames, (tk4 != null ? tk4.image : null), indexName, reference, checkExpr,
                columnDefinition, (tk5 != null ? tk5.image : ""), afterColumn);
    } finally {
      trace_return("ColumnConstraint");
    }
}

  final public SqlStatement DropStatement() throws ParseException {    try {
SqlStatement st;
      jj_consume_token(DROP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DATABASE:{
        st = DropDatabaseStatement();
        break;
        }
      case TEMPORARY:
      case TABLE:{
        st = DropTableStatement();
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return st;
    } finally {
      trace_return("DropStatement");
    }
}

  final public SqlStatement DropDatabaseStatement() throws ParseException {    try {
Token tk = null;
    String dbName;
      jj_consume_token(DATABASE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        tk = jj_consume_token(IF);
        jj_consume_token(EXISTS);
        break;
        }
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      dbName = DbObjectName();
return new DropDatabaseStatement(dbName, tk != null);
    } finally {
      trace_return("DropDatabaseStatement");
    }
}

  final public SqlStatement DropTableStatement() throws ParseException {    try {
Token tk = null;
    Token tk2 = null;
    List<String> tableNames;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEMPORARY:{
        tk = jj_consume_token(TEMPORARY);
        break;
        }
      default:
        jj_la1[130] = jj_gen;
        ;
      }
      jj_consume_token(TABLE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        tk2 = jj_consume_token(IF);
        jj_consume_token(EXISTS);
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        ;
      }
      tableNames = DbObjectNames();
return new DropTableStatement(tk != null, tk2 != null, tableNames);
    } finally {
      trace_return("DropTableStatement");
    }
}

/*
LOCK TABLES
    tbl_name [AS alias] {READ [LOCAL] | [LOW_PRIORITY] WRITE}
    [, tbl_name [AS alias] {READ [LOCAL] | [LOW_PRIORITY] WRITE}] ...
*/
  final public SqlStatement LockTablesStatement() throws ParseException {    try {
List<LockTablesSpecification> specifications = new ArrayList<LockTablesSpecification>();
    LockTablesSpecification specification;
      jj_consume_token(LOCK);
      jj_consume_token(TABLES);
      specification = LockTablesSpecification();
specifications.add(specification);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 129:{
          ;
          break;
          }
        default:
          jj_la1[132] = jj_gen;
          break label_8;
        }
        jj_consume_token(129);
        specification = LockTablesSpecification();
specifications.add(specification);
      }
return new LockTablesStatement(specifications);
    } finally {
      trace_return("LockTablesStatement");
    }
}

  final public LockTablesSpecification LockTablesSpecification() throws ParseException {    try {
String tableName;
    Token alias = null, tk = null, tk2 = null, tk3 = null, tk4 = null;
      tableName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        alias = jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[133] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case READ:{
        tk = jj_consume_token(READ);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOCAL:{
          tk2 = jj_consume_token(LOCAL);
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          ;
        }
        break;
        }
      case LOW_PRIORITY:
      case WRITE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOW_PRIORITY:{
          tk3 = jj_consume_token(LOW_PRIORITY);
          break;
          }
        default:
          jj_la1[135] = jj_gen;
          ;
        }
        tk4 = jj_consume_token(WRITE);
        break;
        }
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return new LockTablesSpecification(tableName, alias != null ? alias.image : null, tk != null, tk2 != null, tk3 != null, tk4 != null);
    } finally {
      trace_return("LockTablesSpecification");
    }
}

  final public SqlStatement UnlockTablesStatement() throws ParseException {    try {

      jj_consume_token(UNLOCK);
      jj_consume_token(TABLES);
return new UnlockTablesStatement();
    } finally {
      trace_return("UnlockTablesStatement");
    }
}

  final public SqlStatement StartTransactionStatement() throws ParseException {    try {

      jj_consume_token(START);
      jj_consume_token(TRANSACTION);
return new StartTransactionStatement();
    } finally {
      trace_return("StartTransactionStatement");
    }
}

  final public SqlStatement CommitTransactionStatement() throws ParseException {    try {

      jj_consume_token(COMMIT);
return new CommitTransactionStatement();
    } finally {
      trace_return("CommitTransactionStatement");
    }
}

  final public List<String> DbObjectNames() throws ParseException {    try {
List<String> result = new ArrayList<String>();
    String name;
      name = DbObjectName();
result.add(name);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 129:{
          ;
          break;
          }
        default:
          jj_la1[137] = jj_gen;
          break label_9;
        }
        jj_consume_token(129);
        name = DbObjectName();
result.add(name);
      }
return result;
    } finally {
      trace_return("DbObjectNames");
    }
}

  final public String DbObjectName() throws ParseException {    try {
Token tk;
    String str;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        tk = jj_consume_token(S_IDENTIFIER);
str = tk.image;
        break;
        }
      case S_QUOTED_IDENTIFIER:{
        tk = jj_consume_token(S_QUOTED_IDENTIFIER);
str = tk.image;
        break;
        }
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return str;
    } finally {
      trace_return("DbObjectName");
    }
}

  final public String Identifier() throws ParseException {    try {
Token tk;
      tk = jj_consume_token(S_IDENTIFIER);
return tk.image;
    } finally {
      trace_return("Identifier");
    }
}

  final public List<Assignment> Assignments() throws ParseException {    try {
List<Assignment> assignments = new ArrayList<Assignment>();
    Assignment assignment;
      assignment = Assignment();
assignments.add(assignment);
      label_10:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(129);
        assignment = Assignment();
assignments.add(assignment);
      }
return assignments;
    } finally {
      trace_return("Assignments");
    }
}

  final public Assignment Assignment() throws ParseException {    try {
String columnName;
    Value value;
    String str;
      columnName = DbObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        value = Value();
        break;
        }
      case S_IDENTIFIER:{
        str = Identifier();
value = new StringValue(str);
        break;
        }
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return new Assignment(columnName, value);
    } finally {
      trace_return("Assignment");
    }
}

  final public List<ValueList> MultiValueList() throws ParseException {    try {
List<ValueList> result = new ArrayList<ValueList>();
    ValueList valueList;
      valueList = ValueList();
result.add(valueList);
      label_11:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(129);
        valueList = ValueList();
result.add(valueList);
      }
return result;
    } finally {
      trace_return("MultiValueList");
    }
}

  final public ValueList ValueList() throws ParseException {    try {
List<Value> values = new ArrayList<Value>();
    Value value;
      jj_consume_token(127);
      value = Value();
values.add(value);
      label_12:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(129);
        value = Value();
values.add(value);
      }
      jj_consume_token(128);
return new ValueList(values);
    } finally {
      trace_return("ValueList");
    }
}

  final public Value Value() throws ParseException {    try {
Value val;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 130:{
        val = JdbcPlaceholderValue();
        break;
        }
      case S_INTEGER:{
        val = IntValue();
        break;
        }
      case S_DOUBLE:{
        val = DoubleValue();
        break;
        }
      case 124:
      case 125:{
        val = StringValue();
        break;
        }
      case S_BINARY_FORMAT1:
      case S_BINARY_FORMAT2:{
        val = BinaryValue();
        break;
        }
      case S_BIT_FORMAT1:
      case S_BIT_FORMAT2:{
        val = BitFieldValue();
        break;
        }
      case NULL:{
        val = NullValue();
        break;
        }
      case CURRENT_TIMESTAMP:{
        val = SystemVariableValue();
        break;
        }
      case TODO:{
        val = ExpressionValue();
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return val;
    } finally {
      trace_return("Value");
    }
}

  final public StringValue StringValue() throws ParseException {    try {
Token tk;
      tk = CharLiteral();
return new StringValue(tk.image);
    } finally {
      trace_return("StringValue");
    }
}

  final public BinaryValue BinaryValue() throws ParseException {    try {
Token tk;
    BinaryValue bv;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_BINARY_FORMAT1:{
        tk = jj_consume_token(S_BINARY_FORMAT1);
bv = new BinaryValue(BinaryValue.Format.FORMAT1, tk.image.substring(2, tk.image.length() - 1));
        break;
        }
      case S_BINARY_FORMAT2:{
        tk = jj_consume_token(S_BINARY_FORMAT2);
bv = new BinaryValue(BinaryValue.Format.FORMAT2, tk.image.substring(2));
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return bv;
    } finally {
      trace_return("BinaryValue");
    }
}

  final public BitFieldValue BitFieldValue() throws ParseException {    try {
Token tk;
    BitFieldValue bfv;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_BIT_FORMAT1:{
        tk = jj_consume_token(S_BIT_FORMAT1);
bfv = new BitFieldValue(BitFieldValue.Format.FORMAT1, tk.image.substring(2, tk.image.length() - 1));
        break;
        }
      case S_BIT_FORMAT2:{
        tk = jj_consume_token(S_BIT_FORMAT2);
bfv = new BitFieldValue(BitFieldValue.Format.FORMAT2, tk.image.substring(2));
        break;
        }
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
return bfv;
    } finally {
      trace_return("BitFieldValue");
    }
}

  final public IntegerValue IntValue() throws ParseException {    try {
Token tk;
      tk = jj_consume_token(S_INTEGER);
return new IntegerValue(tk.image);
    } finally {
      trace_return("IntValue");
    }
}

  final public DoubleValue DoubleValue() throws ParseException {    try {
Token tk;
      tk = jj_consume_token(S_DOUBLE);
return new DoubleValue(tk.image);
    } finally {
      trace_return("DoubleValue");
    }
}

  final public NullValue NullValue() throws ParseException {    try {

      jj_consume_token(NULL);
return new NullValue();
    } finally {
      trace_return("NullValue");
    }
}

  final public JdbcPlaceholderValue JdbcPlaceholderValue() throws ParseException {    try {

      jj_consume_token(130);
return new JdbcPlaceholderValue();
    } finally {
      trace_return("JdbcPlaceholderValue");
    }
}

  final public SystemVariableValue SystemVariableValue() throws ParseException {    try {
Token tk;
      tk = jj_consume_token(CURRENT_TIMESTAMP);
return new SystemVariableValue(tk.image);
    } finally {
      trace_return("SystemVariableValue");
    }
}

  final public ExpressionValue ExpressionValue() throws ParseException {    try {

      jj_consume_token(TODO);
return new ExpressionValue("TODO");
    } finally {
      trace_return("ExpressionValue");
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (!jj_rescan) trace_call("DoubleValue(LOOKING AHEAD...)");
    if (jj_scan_token(S_DOUBLE)) { if (!jj_rescan) trace_return("DoubleValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("DoubleValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(LONGTEXT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(MEDIUMTEXT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(TEXT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(TINYTEXT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (!jj_rescan) trace_call("IntValue(LOOKING AHEAD...)");
    if (jj_scan_token(S_INTEGER)) { if (!jj_rescan) trace_return("IntValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("IntValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (!jj_rescan) trace_call("CharLiteral(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) { if (!jj_rescan) trace_return("CharLiteral(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("CharLiteral(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(VARCHAR)) return true;
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(DATETIME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(S_BIT_FORMAT2)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(S_BIT_FORMAT1)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(NUMERIC)) return true;
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(DECIMAL)) return true;
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(FLOAT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(DOUBLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(REAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (!jj_rescan) trace_call("BitFieldValue(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) { if (!jj_rescan) trace_return("BitFieldValue(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("BitFieldValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(BIGINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(INTEGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(MEDIUMINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(SMALLINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(TINYINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(BIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(S_BINARY_FORMAT2)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(S_BINARY_FORMAT1)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (!jj_rescan) trace_call("ColumnType(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) { if (!jj_rescan) trace_return("ColumnType(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("ColumnType(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_64()
 {
    if (!jj_rescan) trace_call("BinaryValue(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) { if (!jj_rescan) trace_return("BinaryValue(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("BinaryValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_63()
 {
    if (!jj_rescan) trace_call("StringValue(LOOKING AHEAD...)");
    if (jj_3R_89()) { if (!jj_rescan) trace_return("StringValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("StringValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(127)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (!jj_rescan) trace_call("Value(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) { if (!jj_rescan) trace_return("Value(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Value(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(129)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (!jj_rescan) trace_call("ValueList(LOOKING AHEAD...)");
    if (jj_scan_token(127)) { if (!jj_rescan) trace_return("ValueList(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ValueList(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(129)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (!jj_rescan) trace_call("ColumnName(LOOKING AHEAD...)");
    if (jj_3R_20()) { if (!jj_rescan) trace_return("ColumnName(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("ColumnName(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(K_DEFAULT)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (!jj_rescan) trace_call("Assignment(LOOKING AHEAD...)");
    if (jj_3R_20()) { if (!jj_rescan) trace_return("Assignment(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Assignment(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_13()
 {
    if (!jj_rescan) trace_call("ColumnDefinition(LOOKING AHEAD...)");
    if (jj_3R_17()) { if (!jj_rescan) trace_return("ColumnDefinition(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_18()) { if (!jj_rescan) trace_return("ColumnDefinition(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("ColumnDefinition(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(129)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(COLLATE)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(COLLATE)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(COLLATE)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(COLLATE)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (!jj_rescan) trace_call("DbObjectName(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) { if (!jj_rescan) trace_return("DbObjectName(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("DbObjectName(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_68()
 {
    if (!jj_rescan) trace_call("ExpressionValue(LOOKING AHEAD...)");
    if (jj_scan_token(TODO)) { if (!jj_rescan) trace_return("ExpressionValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ExpressionValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_88()
 {
    if (!jj_rescan) trace_call("ColumnReference(LOOKING AHEAD...)");
    if (jj_scan_token(REFERENCES)) { if (!jj_rescan) trace_return("ColumnReference(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ColumnReference(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_67()
 {
    if (!jj_rescan) trace_call("SystemVariableValue(LOOKING AHEAD...)");
    if (jj_scan_token(CURRENT_TIMESTAMP)) { if (!jj_rescan) trace_return("SystemVariableValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SystemVariableValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (!jj_rescan) trace_call("JdbcPlaceholderValue(LOOKING AHEAD...)");
    if (jj_scan_token(130)) { if (!jj_rescan) trace_return("JdbcPlaceholderValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("JdbcPlaceholderValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (!jj_rescan) trace_call("NullValue(LOOKING AHEAD...)");
    if (jj_scan_token(NULL)) { if (!jj_rescan) trace_return("NullValue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("NullValue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[143];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0xe01,0xe00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x31000,0x2000,0x10000,0x2000,0x0,0x980000,0x980000,0x980000,0x0,0x0,0x600000,0x0,0x600000,0xfc4000,0x200000,0xfc4000,0x0,0x1000000,0x2000000,0x0,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x0,0x10000000,0x20000000,0x10000000,0x20000000,0x10000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcc000000,0x0,0x0,0x0,0x0,0x0,0xc0000,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x400000,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x31000,0x2000,0x10000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40100,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe8000000,0x0,0xe8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x4000,0x8000,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff1fff,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x8000000,0x10000000,0x10000000,0x20000000,0x20000000,0x0,0x10000000,0x0,0x0,0x0,0x40000000,0x0,0x10000000,0x10000000,0x0,0x10000000,0x10000000,0x80000000,0x20000000,0x0,0x0,0x0,0x0,0xe8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x8006100,0x8006100,0x60000,0x60000,0x80000,0x100000,0x8000,0x0,0x210000,0x610000,0x80,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x6000000,0x0,0x0,0x40000007,0x0,0x40000007,0x88,0x0,0x88,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x4000000,0x0,0x2000000,0x4000000,0x2000000,0x4000000,0x2000000,0x4000000,0x2000000,0x4000000,0x2000000,0x4000000,0x2000000,0x4000000,0x2000000,0x4000000,0x0,0x0,0x60,0x10,0x80,0x80,0x0,0xe00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x40000000,0x80000000,0x80000000,0x40000007,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x1000000,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x30000000,0x40000582,0x582,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x1000,0x1000,0x4000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x10000,0x10000,0x10000,0x30210000,0x8000,0x30000,0x0,0x30000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0x0,0x30000,0x0,0x0,0x30000,0x0,0x0,0x30000,0x0,0x0,0x0,0x0,0x30000,0x0,0x1,0x1,0x30000,0x0,0x0,0x0,0x0,0x0,0x8,0x20,0x0,0x50,0x0,0x30000,0x18000,0x3de00000,0x1800000,0xc000000,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x4,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor. */
  public SQLParser(Provider stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 143; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(String dsl) throws ParseException, TokenMgrException {
	   this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
	  ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 143; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 143; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 143; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 } else {
	   trace_scan(jj_scanpos, kind);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[131];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 143; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 131; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : SQLParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrException.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrException.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
